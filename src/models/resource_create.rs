/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceCreate {
    /// A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
    #[serde(rename = "key")]
    pub key: String,
    /// The name of the resource
    #[serde(rename = "name")]
    pub name: String,
    /// The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
    #[serde(rename = "urn", skip_serializing_if = "Option::is_none")]
    pub urn: Option<String>,
    /// An optional longer description of what this resource respresents in your system
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    ///          A actions definition block, typically contained within a resource type definition block.         The actions represents the ways you can interact with a protected resource.         
    #[serde(rename = "actions")]
    pub actions: std::collections::HashMap<String, models::ActionBlockEditable>,
    /// optional dictionary of key-value pairs that can be used to store arbitrary metadata about this resource. This metadata can be used to filter resource using query parameters with attr_ prefix
    #[serde(rename = "type_attributes", skip_serializing_if = "Option::is_none")]
    pub type_attributes: Option<serde_json::Value>,
    /// Attributes that each resource of this type defines, and can be used in your ABAC policies.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<std::collections::HashMap<String, models::AttributeBlockEditable>>,
    /// Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, base roles, etc.
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<std::collections::HashMap<String, models::RoleBlockEditable>>,
    /// Relations to other resources. The key is the relation key, and the value is the related resource.
    #[serde(rename = "relations", skip_serializing_if = "Option::is_none")]
    pub relations: Option<std::collections::HashMap<String, String>>,
}

impl ResourceCreate {
    pub fn new(key: String, name: String, actions: std::collections::HashMap<String, models::ActionBlockEditable>) -> ResourceCreate {
        ResourceCreate {
            key,
            name,
            urn: None,
            description: None,
            actions,
            type_attributes: None,
            attributes: None,
            roles: None,
            relations: None,
        }
    }
}

