/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProxyConfigUpdate {
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<Box<models::Secret>>,
    /// The name of the proxy config, for example: 'Stripe API'
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Proxy config mapping rules will include the rules that will be used to map the request to the backend service by a URL and a http method.
    #[serde(rename = "mapping_rules", skip_serializing_if = "Option::is_none")]
    pub mapping_rules: Option<Vec<models::MappingRule>>,
    /// Proxy config auth mechanism will define the authentication mechanism that will be used to authenticate the request.  Bearer injects the secret into the Authorization header as a Bearer token,  Basic injects the secret into the Authorization header as a Basic user:password,  Headers injects plain headers into the request.
    #[serde(rename = "auth_mechanism", skip_serializing_if = "Option::is_none")]
    pub auth_mechanism: Option<models::AuthMechanism>,
}

impl ProxyConfigUpdate {
    pub fn new() -> ProxyConfigUpdate {
        ProxyConfigUpdate {
            secret: None,
            name: None,
            mapping_rules: None,
            auth_mechanism: None,
        }
    }
}

