/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceRead {
    /// A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
    #[serde(rename = "key")]
    pub key: String,
    /// Unique id of the resource
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Unique id of the organization that the resource belongs to.
    #[serde(rename = "organization_id")]
    pub organization_id: uuid::Uuid,
    /// Unique id of the project that the resource belongs to.
    #[serde(rename = "project_id")]
    pub project_id: uuid::Uuid,
    /// Unique id of the environment that the resource belongs to.
    #[serde(rename = "environment_id")]
    pub environment_id: uuid::Uuid,
    /// Date and time when the resource was created (ISO_8601 format).
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Date and time when the resource was last updated/modified (ISO_8601 format).
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// The name of the resource
    #[serde(rename = "name")]
    pub name: String,
    /// The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
    #[serde(rename = "urn", skip_serializing_if = "Option::is_none")]
    pub urn: Option<String>,
    /// An optional longer description of what this resource respresents in your system
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    ///          A actions definition block, typically contained within a resource type definition block.         The actions represents the ways you can interact with a protected resource.         
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<std::collections::HashMap<String, models::ActionBlockRead>>,
    /// optional dictionary of key-value pairs that can be used to store arbitrary metadata about this resource. This metadata can be used to filter resource using query parameters with attr_ prefix
    #[serde(rename = "type_attributes", skip_serializing_if = "Option::is_none")]
    pub type_attributes: Option<serde_json::Value>,
    /// Attributes that each resource of this type defines, and can be used in your ABAC policies.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<std::collections::HashMap<String, models::AttributeBlockRead>>,
    /// Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, etc.
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<std::collections::HashMap<String, models::ResourceRoleRead>>,
    ///          A relations definition block, typically contained within a resource type definition block.         The relations represents the ways you can interact with a protected resource.         
    #[serde(rename = "relations", skip_serializing_if = "Option::is_none")]
    pub relations: Option<std::collections::HashMap<String, models::RelationBlockRead>>,
    #[serde(rename = "action_groups", skip_serializing_if = "Option::is_none")]
    pub action_groups: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl ResourceRead {
    pub fn new(key: String, id: uuid::Uuid, organization_id: uuid::Uuid, project_id: uuid::Uuid, environment_id: uuid::Uuid, created_at: String, updated_at: String, name: String) -> ResourceRead {
        ResourceRead {
            key,
            id,
            organization_id,
            project_id,
            environment_id,
            created_at,
            updated_at,
            name,
            urn: None,
            description: None,
            actions: None,
            type_attributes: None,
            attributes: None,
            roles: None,
            relations: None,
            action_groups: None,
        }
    }
}

