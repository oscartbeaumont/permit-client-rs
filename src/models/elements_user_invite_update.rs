/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElementsUserInviteUpdate {
    /// The key of the user that is being invited
    #[serde(rename = "key")]
    pub key: String,
    /// The status of the user invite
    #[serde(rename = "status")]
    pub status: models::UserInviteStatus,
    /// The email of the user that being invited
    #[serde(rename = "email")]
    pub email: String,
    /// The first name of the user that is being invited
    #[serde(rename = "first_name")]
    pub first_name: String,
    /// The last name of the user that is being invited
    #[serde(rename = "last_name")]
    pub last_name: String,
    /// The role of the user that is being invited
    #[serde(rename = "role_id")]
    pub role_id: uuid::Uuid,
    /// The tenant id of the user that is being invited
    #[serde(rename = "tenant_id")]
    pub tenant_id: uuid::Uuid,
}

impl ElementsUserInviteUpdate {
    pub fn new(key: String, status: models::UserInviteStatus, email: String, first_name: String, last_name: String, role_id: uuid::Uuid, tenant_id: uuid::Uuid) -> ElementsUserInviteUpdate {
        ElementsUserInviteUpdate {
            key,
            status,
            email,
            first_name,
            last_name,
            role_id,
            tenant_id,
        }
    }
}

