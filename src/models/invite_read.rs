/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InviteRead {
    /// Unique id of the invite
    #[serde(rename = "member_id", skip_serializing_if = "Option::is_none")]
    pub member_id: Option<uuid::Uuid>,
    /// The invited member's email address
    #[serde(rename = "email")]
    pub email: String,
    /// The role the member will be assigned with
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<models::MemberAccessLevel>,
    /// Unique id of the invite
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Unique id of the organization that the invite belongs to.
    #[serde(rename = "organization_id")]
    pub organization_id: uuid::Uuid,
    /// The invite code that is sent to the member's email
    #[serde(rename = "invite_code")]
    pub invite_code: uuid::Uuid,
    /// Date and time when the invite was created (ISO_8601 format).
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The status of the invite (pending, failed, etc)
    #[serde(rename = "status")]
    pub status: models::InviteStatus,
    /// if failed, the reason the invitation failed
    #[serde(rename = "failed_reason", skip_serializing_if = "Option::is_none")]
    pub failed_reason: Option<String>,
}

impl InviteRead {
    pub fn new(email: String, id: uuid::Uuid, organization_id: uuid::Uuid, invite_code: uuid::Uuid, created_at: String, status: models::InviteStatus) -> InviteRead {
        InviteRead {
            member_id: None,
            email,
            role: None,
            id,
            organization_id,
            invite_code,
            created_at,
            status,
            failed_reason: None,
        }
    }
}

