/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessRequestRead {
    /// details of the access request, including the resource and tenant
    #[serde(rename = "access_request_details")]
    pub access_request_details: Box<models::AccessRequestDetails>,
    /// Optional business justification provided by the user requesting access
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Unique id of the access request
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Unique id of the organization that the access request belongs to.
    #[serde(rename = "organization_id")]
    pub organization_id: uuid::Uuid,
    /// Unique id of the project that the access request belongs to.
    #[serde(rename = "project_id")]
    pub project_id: uuid::Uuid,
    /// Unique id of the environment that the access request belongs to.
    #[serde(rename = "environment_id")]
    pub environment_id: uuid::Uuid,
    /// Date and time when the access request was created (ISO_8601 format).
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Date and time when the access request was last updated/modified (ISO_8601 format).
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// optional id of the user that is requesting the access
    #[serde(rename = "requesting_user_id", skip_serializing_if = "Option::is_none")]
    pub requesting_user_id: Option<uuid::Uuid>,
    /// when the access request was reviewed
    #[serde(rename = "reviewed_at", skip_serializing_if = "Option::is_none")]
    pub reviewed_at: Option<String>,
    /// comment provided by the reviewer_user_id
    #[serde(rename = "reviewer_comment", skip_serializing_if = "Option::is_none")]
    pub reviewer_comment: Option<String>,
    /// current status of the access request
    #[serde(rename = "status")]
    pub status: models::RequestStatus,
    /// Optional id of the user who review the access request
    #[serde(rename = "reviewer_user_id", skip_serializing_if = "Option::is_none")]
    pub reviewer_user_id: Option<uuid::Uuid>,
}

impl AccessRequestRead {
    pub fn new(access_request_details: models::AccessRequestDetails, id: uuid::Uuid, organization_id: uuid::Uuid, project_id: uuid::Uuid, environment_id: uuid::Uuid, created_at: String, updated_at: String, status: models::RequestStatus) -> AccessRequestRead {
        AccessRequestRead {
            access_request_details: Box::new(access_request_details),
            reason: None,
            id,
            organization_id,
            project_id,
            environment_id,
            created_at,
            updated_at,
            requesting_user_id: None,
            reviewed_at: None,
            reviewer_comment: None,
            status,
            reviewer_user_id: None,
        }
    }
}

