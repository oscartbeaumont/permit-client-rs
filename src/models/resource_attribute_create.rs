/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceAttributeCreate {
    /// A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.
    #[serde(rename = "key")]
    pub key: String,
    /// The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.
    #[serde(rename = "type")]
    pub r#type: models::AttributeType,
    /// An optional longer description of what this attribute respresents in your system
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl ResourceAttributeCreate {
    pub fn new(key: String, r#type: models::AttributeType) -> ResourceAttributeCreate {
        ResourceAttributeCreate {
            key,
            r#type,
            description: None,
        }
    }
}

