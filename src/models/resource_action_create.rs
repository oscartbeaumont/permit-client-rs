/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceActionCreate {
    /// A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.
    #[serde(rename = "key")]
    pub key: String,
    /// The name of the action
    #[serde(rename = "name")]
    pub name: String,
    /// An optional longer description of what this action respresents in your system
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
}

impl ResourceActionCreate {
    pub fn new(key: String, name: String) -> ResourceActionCreate {
        ResourceActionCreate {
            key,
            name,
            description: None,
            attributes: None,
        }
    }
}

