/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PdpConfigRead {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Unique id of the organization that the pdp_config belongs to.
    #[serde(rename = "organization_id")]
    pub organization_id: uuid::Uuid,
    /// Unique id of the project that the pdp_config belongs to.
    #[serde(rename = "project_id")]
    pub project_id: uuid::Uuid,
    /// Unique id of the environment that the pdp_config belongs to.
    #[serde(rename = "environment_id")]
    pub environment_id: uuid::Uuid,
    #[serde(rename = "client_secret")]
    pub client_secret: String,
    #[serde(rename = "num_shards", skip_serializing_if = "Option::is_none")]
    pub num_shards: Option<i32>,
    /// Whether debug audit logs are enabled or not
    #[serde(rename = "debug_audit_logs", skip_serializing_if = "Option::is_none")]
    pub debug_audit_logs: Option<bool>,
    /// The minimum image version of PDP that can connect to this config
    #[serde(rename = "min_pdp_version", skip_serializing_if = "Option::is_none")]
    pub min_pdp_version: Option<String>,
}

impl PdpConfigRead {
    pub fn new(id: uuid::Uuid, organization_id: uuid::Uuid, project_id: uuid::Uuid, environment_id: uuid::Uuid, client_secret: String) -> PdpConfigRead {
        PdpConfigRead {
            id,
            name: None,
            organization_id,
            project_id,
            environment_id,
            client_secret,
            num_shards: None,
            debug_audit_logs: None,
            min_pdp_version: None,
        }
    }
}

