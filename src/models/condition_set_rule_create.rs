/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConditionSetRuleCreate {
    /// The userset that will be given permission, i.e: all the users matching this rule will be given the specified permission
    #[serde(rename = "user_set")]
    pub user_set: String,
    /// The permission that will be granted to the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the \"permission name\".
    #[serde(rename = "permission")]
    pub permission: String,
    /// The resourceset that represents the resources that are granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*
    #[serde(rename = "resource_set")]
    pub resource_set: String,
    /// if True, will set the condition set rule to the role's autogen user-set.
    #[serde(rename = "is_role", skip_serializing_if = "Option::is_none")]
    pub is_role: Option<bool>,
    /// if True, will set the condition set rule to the resource's autogen resource-set.
    #[serde(rename = "is_resource", skip_serializing_if = "Option::is_none")]
    pub is_resource: Option<bool>,
}

impl ConditionSetRuleCreate {
    pub fn new(user_set: String, permission: String, resource_set: String) -> ConditionSetRuleCreate {
        ConditionSetRuleCreate {
            user_set,
            permission,
            resource_set,
            is_role: None,
            is_resource: None,
        }
    }
}

