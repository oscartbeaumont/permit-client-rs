/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelationshipTupleCreate {
    /// the resource instance assigned the new relation (accepts either the resource instance id or resource_key:resource_instance_key)
    #[serde(rename = "subject")]
    pub subject: String,
    /// the relation to assign between the subject and object
    #[serde(rename = "relation")]
    pub relation: String,
    /// the resource instance on which the new relation is assigned (accepts either the resource instance id or resource_key:resource_instance_key)
    #[serde(rename = "object")]
    pub object: String,
    /// The tenant the subject and object belong to, if the resource instances don't exist yet, the tenant is required to create them. otherwise it is ignored
    #[serde(rename = "tenant", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
}

impl RelationshipTupleCreate {
    pub fn new(subject: String, relation: String, object: String) -> RelationshipTupleCreate {
        RelationshipTupleCreate {
            subject,
            relation,
            object,
            tenant: None,
        }
    }
}

