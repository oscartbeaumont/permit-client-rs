/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RawData {
    #[serde(rename = "engine", skip_serializing_if = "Option::is_none")]
    pub engine: Option<models::Engine>,
    #[serde(rename = "decision_id", deserialize_with = "Option::deserialize")]
    pub decision_id: Option<serde_json::Value>,
    #[serde(rename = "labels")]
    pub labels: Box<models::OpaLabels>,
    #[serde(rename = "timestamp", deserialize_with = "Option::deserialize")]
    pub timestamp: Option<serde_json::Value>,
    #[serde(rename = "path", deserialize_with = "Option::deserialize")]
    pub path: Option<serde_json::Value>,
    #[serde(rename = "input")]
    pub input: serde_json::Value,
    #[serde(rename = "result")]
    pub result: serde_json::Value,
    #[serde(rename = "metrics")]
    pub metrics: Box<models::OpaMetrics>,
    #[serde(rename = "tenant", deserialize_with = "Option::deserialize")]
    pub tenant: Option<serde_json::Value>,
    #[serde(rename = "process_time_ms", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub process_time_ms: Option<Option<serde_json::Value>>,
}

impl RawData {
    pub fn new(decision_id: Option<serde_json::Value>, labels: models::OpaLabels, timestamp: Option<serde_json::Value>, path: Option<serde_json::Value>, input: serde_json::Value, result: serde_json::Value, metrics: models::OpaMetrics, tenant: Option<serde_json::Value>) -> RawData {
        RawData {
            engine: None,
            decision_id,
            labels: Box::new(labels),
            timestamp,
            path,
            input,
            result,
            metrics: Box::new(metrics),
            tenant,
            process_time_ms: None,
        }
    }
}

