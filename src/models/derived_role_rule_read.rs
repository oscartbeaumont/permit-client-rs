/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DerivedRoleRuleRead {
    /// the role id that needs to exist on the related resource (from the relation)
    #[serde(rename = "role_id", deserialize_with = "Option::deserialize")]
    pub role_id: Option<serde_json::Value>,
    /// the resource id that needs to exist on the related role (from the relation)
    #[serde(rename = "resource_id", deserialize_with = "Option::deserialize")]
    pub resource_id: Option<serde_json::Value>,
    /// the relation id that needs to exist between the resource and the related resource
    #[serde(rename = "relation_id", deserialize_with = "Option::deserialize")]
    pub relation_id: Option<serde_json::Value>,
    /// the role key that needs to exist on the related resource (from the relation)
    #[serde(rename = "role", deserialize_with = "Option::deserialize")]
    pub role: Option<serde_json::Value>,
    /// the resource key that needs to exist on the related role (from the relation)
    #[serde(rename = "on_resource", deserialize_with = "Option::deserialize")]
    pub on_resource: Option<serde_json::Value>,
    /// the relation key that needs to exist between the resource and the related resource
    #[serde(rename = "linked_by_relation", deserialize_with = "Option::deserialize")]
    pub linked_by_relation: Option<serde_json::Value>,
    /// the settings of the derived role rule
    #[serde(rename = "when", skip_serializing_if = "Option::is_none")]
    pub when: Option<Box<models::DerivationSettings>>,
}

impl DerivedRoleRuleRead {
    pub fn new(role_id: Option<serde_json::Value>, resource_id: Option<serde_json::Value>, relation_id: Option<serde_json::Value>, role: Option<serde_json::Value>, on_resource: Option<serde_json::Value>, linked_by_relation: Option<serde_json::Value>) -> DerivedRoleRuleRead {
        DerivedRoleRuleRead {
            role_id,
            resource_id,
            relation_id,
            role,
            on_resource,
            linked_by_relation,
            when: None,
        }
    }
}

