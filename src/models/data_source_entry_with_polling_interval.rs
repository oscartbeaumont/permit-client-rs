/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// DataSourceEntryWithPollingInterval : Data source configuration - where client's should retrieve data from and how they should store it
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSourceEntryWithPollingInterval {
    /// Url source to query for data
    #[serde(rename = "url")]
    pub url: String,
    /// Suggested fetcher configuration (e.g. auth or method) to fetch data with
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<serde_json::Value>,
    /// topics the data applies to
    #[serde(rename = "topics", skip_serializing_if = "Option::is_none")]
    pub topics: Option<Vec<String>>,
    /// OPA data api path to store the document at
    #[serde(rename = "dst_path", skip_serializing_if = "Option::is_none")]
    pub dst_path: Option<String>,
    /// Method used to write into OPA - PUT/PATCH, when using the PATCH method the data field should conform to the JSON patch schema defined in RFC 6902(https://datatracker.ietf.org/doc/html/rfc6902#section-3)
    #[serde(rename = "save_method", skip_serializing_if = "Option::is_none")]
    pub save_method: Option<String>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<Box<models::Data>>,
    /// Polling interval to refresh data from data source
    #[serde(rename = "periodic_update_interval", skip_serializing_if = "Option::is_none")]
    pub periodic_update_interval: Option<f64>,
}

impl DataSourceEntryWithPollingInterval {
    /// Data source configuration - where client's should retrieve data from and how they should store it
    pub fn new(url: String) -> DataSourceEntryWithPollingInterval {
        DataSourceEntryWithPollingInterval {
            url,
            config: None,
            topics: None,
            dst_path: None,
            save_method: None,
            data: None,
            periodic_update_interval: None,
        }
    }
}

