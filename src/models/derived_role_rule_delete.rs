/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DerivedRoleRuleDelete {
    /// the role key that needs to exist on the related resource (from the relation)
    #[serde(rename = "role")]
    pub role: String,
    /// the resource key that needs to exist on the related role (from the relation)
    #[serde(rename = "on_resource")]
    pub on_resource: String,
    /// the relation key that needs to exist between the resource and the related resource
    #[serde(rename = "linked_by_relation")]
    pub linked_by_relation: String,
    /// the settings of the derived role rule
    #[serde(rename = "when", skip_serializing_if = "Option::is_none")]
    pub when: Option<Box<models::DerivationSettings>>,
}

impl DerivedRoleRuleDelete {
    pub fn new(role: String, on_resource: String, linked_by_relation: String) -> DerivedRoleRuleDelete {
        DerivedRoleRuleDelete {
            role,
            on_resource,
            linked_by_relation,
            when: None,
        }
    }
}

