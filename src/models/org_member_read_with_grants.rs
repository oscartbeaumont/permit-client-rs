/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrgMemberReadWithGrants {
    /// Unique id of the account member
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Email of the user controlling this account
    #[serde(rename = "email")]
    pub email: String,
    /// Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
    #[serde(rename = "email_verified")]
    pub email_verified: bool,
    /// Name of this user
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// First name of the user
    #[serde(rename = "given_name", skip_serializing_if = "Option::is_none")]
    pub given_name: Option<String>,
    /// Last name of the user
    #[serde(rename = "family_name", skip_serializing_if = "Option::is_none")]
    pub family_name: Option<String>,
    /// URL to picture, photo, or avatar of the user that controls this account.
    #[serde(rename = "picture", skip_serializing_if = "Option::is_none")]
    pub picture: Option<String>,
    /// Whether or not this user has special access to permit.io organizations
    #[serde(rename = "is_superuser")]
    pub is_superuser: bool,
    /// Whether or not this user is currently onboarding, needs to be replaced by a user journey object
    #[serde(rename = "is_onboarding")]
    pub is_onboarding: bool,
    /// the step the user is currently going through in onboarding
    #[serde(rename = "onboarding_step")]
    pub onboarding_step: models::OnboardingStep,
    /// Date and time when the account member was created (ISO_8601 format).
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Last date and time this user logged in (ISO_8601 format).
    #[serde(rename = "last_login", skip_serializing_if = "Option::is_none")]
    pub last_login: Option<String>,
    /// Last IP address from which this user logged in.
    #[serde(rename = "last_ip", skip_serializing_if = "Option::is_none")]
    pub last_ip: Option<String>,
    /// Total number of logins this user has performed.
    #[serde(rename = "logins_count", skip_serializing_if = "Option::is_none")]
    pub logins_count: Option<i32>,
    #[serde(rename = "identities")]
    pub identities: Vec<models::IdentityRead>,
    #[serde(rename = "invite", skip_serializing_if = "Option::is_none")]
    pub invite: Option<Box<models::InviteRead>>,
    /// Custom permit.io dashboard settings, such as preferred theme, etc.
    #[serde(rename = "settings")]
    pub settings: serde_json::Value,
    #[serde(rename = "grants")]
    pub grants: Vec<models::Permission>,
}

impl OrgMemberReadWithGrants {
    pub fn new(id: uuid::Uuid, email: String, email_verified: bool, is_superuser: bool, is_onboarding: bool, onboarding_step: models::OnboardingStep, created_at: String, identities: Vec<models::IdentityRead>, settings: serde_json::Value, grants: Vec<models::Permission>) -> OrgMemberReadWithGrants {
        OrgMemberReadWithGrants {
            id,
            email,
            email_verified,
            name: None,
            given_name: None,
            family_name: None,
            picture: None,
            is_superuser,
            is_onboarding,
            onboarding_step,
            created_at,
            last_login: None,
            last_ip: None,
            logins_count: None,
            identities,
            invite: None,
            settings,
            grants,
        }
    }
}

