/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelationshipTupleRead {
    /// resource_key:resource_instance_key of the subject
    #[serde(rename = "subject")]
    pub subject: String,
    /// key of the assigned relation
    #[serde(rename = "relation")]
    pub relation: String,
    /// resource_key:resource_instance_key of the object
    #[serde(rename = "object")]
    pub object: String,
    /// Unique id of the relationship tuple
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// The tenant the relationship tuple is associated with
    #[serde(rename = "tenant")]
    pub tenant: String,
    /// Unique id of the subject
    #[serde(rename = "subject_id")]
    pub subject_id: uuid::Uuid,
    /// Unique id of the relation
    #[serde(rename = "relation_id")]
    pub relation_id: uuid::Uuid,
    /// Unique id of the object
    #[serde(rename = "object_id")]
    pub object_id: uuid::Uuid,
    /// Unique id of the tenant
    #[serde(rename = "tenant_id")]
    pub tenant_id: uuid::Uuid,
    /// Unique id of the organization that the relationship tuple belongs to.
    #[serde(rename = "organization_id")]
    pub organization_id: uuid::Uuid,
    /// Unique id of the project that the relationship tuple belongs to.
    #[serde(rename = "project_id")]
    pub project_id: uuid::Uuid,
    /// Unique id of the environment that the relationship tuple belongs to.
    #[serde(rename = "environment_id")]
    pub environment_id: uuid::Uuid,
    /// Date and time when the relationship tuple was created (ISO_8601 format).
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Date and time when the relationship tuple was created (ISO_8601 format).
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// The subject details of the relationship tuple
    #[serde(rename = "subject_details", skip_serializing_if = "Option::is_none")]
    pub subject_details: Option<Box<models::ResourceInstanceBlockRead>>,
    /// The relation details of the relationship tuple
    #[serde(rename = "relation_details", skip_serializing_if = "Option::is_none")]
    pub relation_details: Option<Box<models::StrippedRelationBlockRead>>,
    /// The object details of the relationship tuple
    #[serde(rename = "object_details", skip_serializing_if = "Option::is_none")]
    pub object_details: Option<Box<models::ResourceInstanceBlockRead>>,
    /// The tenant details of the relationship tuple
    #[serde(rename = "tenant_details", skip_serializing_if = "Option::is_none")]
    pub tenant_details: Option<Box<models::TenantBlockRead>>,
}

impl RelationshipTupleRead {
    pub fn new(subject: String, relation: String, object: String, id: uuid::Uuid, tenant: String, subject_id: uuid::Uuid, relation_id: uuid::Uuid, object_id: uuid::Uuid, tenant_id: uuid::Uuid, organization_id: uuid::Uuid, project_id: uuid::Uuid, environment_id: uuid::Uuid, created_at: String, updated_at: String) -> RelationshipTupleRead {
        RelationshipTupleRead {
            subject,
            relation,
            object,
            id,
            tenant,
            subject_id,
            relation_id,
            object_id,
            tenant_id,
            organization_id,
            project_id,
            environment_id,
            created_at,
            updated_at,
            subject_details: None,
            relation_details: None,
            object_details: None,
            tenant_details: None,
        }
    }
}

