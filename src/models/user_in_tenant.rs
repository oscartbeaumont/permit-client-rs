/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserInTenant {
    /// The tenant key which the user is associated with
    #[serde(rename = "tenant")]
    pub tenant: String,
    /// List of roles assigned to the user in that tenant
    #[serde(rename = "roles")]
    pub roles: Vec<String>,
    /// Whether the user has signed in or not
    #[serde(rename = "status")]
    pub status: models::UserStatus,
    #[serde(rename = "resource_instance_roles", skip_serializing_if = "Option::is_none")]
    pub resource_instance_roles: Option<Vec<models::UserResourceInstanceRole>>,
}

impl UserInTenant {
    pub fn new(tenant: String, roles: Vec<String>, status: models::UserStatus) -> UserInTenant {
        UserInTenant {
            tenant,
            roles,
            status,
            resource_instance_roles: None,
        }
    }
}

