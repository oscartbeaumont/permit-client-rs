/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserObj {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "key")]
    pub key: String,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    #[serde(rename = "assigned_roles", skip_serializing_if = "Option::is_none")]
    pub assigned_roles: Option<Vec<String>>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl UserObj {
    pub fn new(id: uuid::Uuid, key: String, created_at: String, updated_at: String) -> UserObj {
        UserObj {
            id,
            key,
            email: None,
            first_name: None,
            last_name: None,
            attributes: None,
            assigned_roles: None,
            created_at,
            updated_at,
        }
    }
}

