/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpaEngineDecisionLog {
    #[serde(rename = "engine", skip_serializing_if = "Option::is_none")]
    pub engine: Option<Engine>,
    #[serde(rename = "decision_id")]
    pub decision_id: uuid::Uuid,
    #[serde(rename = "labels")]
    pub labels: Box<models::OpaLabels>,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "input", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub input: Option<Option<serde_json::Value>>,
    #[serde(rename = "result", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub result: Option<Option<serde_json::Value>>,
    #[serde(rename = "metrics")]
    pub metrics: Box<models::OpaMetrics>,
}

impl OpaEngineDecisionLog {
    pub fn new(decision_id: uuid::Uuid, labels: models::OpaLabels, timestamp: String, path: String, metrics: models::OpaMetrics) -> OpaEngineDecisionLog {
        OpaEngineDecisionLog {
            engine: None,
            decision_id,
            labels: Box::new(labels),
            timestamp,
            path,
            input: None,
            result: None,
            metrics: Box::new(metrics),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Engine {
    #[serde(rename = "OPA")]
    Opa,
}

impl Default for Engine {
    fn default() -> Engine {
        Self::Opa
    }
}

