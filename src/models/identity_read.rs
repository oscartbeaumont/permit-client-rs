/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRead {
    /// Unique User Id of this identity in the identity provider (including the provider type)
    #[serde(rename = "user_id")]
    pub user_id: String,
    /// The identity provider type this identity came from
    #[serde(rename = "provider")]
    pub provider: String,
    /// Unique User Id of this identity in the identity provider (NOT including the provider type)
    #[serde(rename = "sub")]
    pub sub: String,
    /// Email connected to this account identity
    #[serde(rename = "email")]
    pub email: String,
    /// Whether this email address connected to this account identity is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
    #[serde(rename = "email_verified")]
    pub email_verified: bool,
    /// Raw user info json coming from our identity provider and matching a specific account identity
    #[serde(rename = "auth0_info")]
    pub auth0_info: serde_json::Value,
}

impl IdentityRead {
    pub fn new(user_id: String, provider: String, sub: String, email: String, email_verified: bool, auth0_info: serde_json::Value) -> IdentityRead {
        IdentityRead {
            user_id,
            provider,
            sub,
            email,
            email_verified,
            auth0_info,
        }
    }
}

