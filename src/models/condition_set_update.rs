/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConditionSetUpdate {
    /// A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// an optional longer description of the set
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// a boolean expression that consists of multiple conditions, with and/or logic.
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<serde_json::Value>,
    #[serde(rename = "parent_id", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<Box<models::ParentId>>,
}

impl ConditionSetUpdate {
    pub fn new() -> ConditionSetUpdate {
        ConditionSetUpdate {
            name: None,
            description: None,
            conditions: None,
            parent_id: None,
        }
    }
}

