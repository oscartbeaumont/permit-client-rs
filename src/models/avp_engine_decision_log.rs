/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvpEngineDecisionLog {
    #[serde(rename = "engine", skip_serializing_if = "Option::is_none")]
    pub engine: Option<Engine>,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "tenant")]
    pub tenant: String,
    #[serde(rename = "process_time_ms", skip_serializing_if = "Option::is_none")]
    pub process_time_ms: Option<i32>,
    #[serde(rename = "input")]
    pub input: serde_json::Value,
    #[serde(rename = "result")]
    pub result: serde_json::Value,
}

impl AvpEngineDecisionLog {
    pub fn new(timestamp: String, tenant: String, input: serde_json::Value, result: serde_json::Value) -> AvpEngineDecisionLog {
        AvpEngineDecisionLog {
            engine: None,
            timestamp,
            tenant,
            process_time_ms: None,
            input,
            result,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Engine {
    #[serde(rename = "AVP")]
    Avp,
}

impl Default for Engine {
    fn default() -> Engine {
        Self::Avp
    }
}

