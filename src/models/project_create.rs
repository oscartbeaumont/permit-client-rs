/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectCreate {
    /// A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.
    #[serde(rename = "key")]
    pub key: String,
    /// Optional namespace for URNs. If empty, URNs will be generated from project key.
    #[serde(rename = "urn_namespace", skip_serializing_if = "Option::is_none")]
    pub urn_namespace: Option<String>,
    /// The name of the project
    #[serde(rename = "name")]
    pub name: String,
    /// a longer description outlining the project objectives
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// the settings for this project
    #[serde(rename = "settings", skip_serializing_if = "Option::is_none")]
    pub settings: Option<serde_json::Value>,
    /// the id of the policy repo to use for this project
    #[serde(rename = "active_policy_repo_id", skip_serializing_if = "Option::is_none")]
    pub active_policy_repo_id: Option<uuid::Uuid>,
    /// The initial environments to create for this project. By default, 'Development' and 'Production' are created, specify [] (empty list) to skip that.
    #[serde(rename = "initial_environments", skip_serializing_if = "Option::is_none")]
    pub initial_environments: Option<Vec<models::EnvironmentCreate>>,
}

impl ProjectCreate {
    pub fn new(key: String, name: String) -> ProjectCreate {
        ProjectCreate {
            key,
            urn_namespace: None,
            name,
            description: None,
            settings: None,
            active_policy_repo_id: None,
            initial_environments: None,
        }
    }
}

