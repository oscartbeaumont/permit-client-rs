/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentCopy {
    /// If copying a new environment, the environment configuration. If copying to an existing environment, the environment identifier
    #[serde(rename = "target_env")]
    pub target_env: Box<models::EnvironmentCopyTarget>,
    /// Action to take when detecting a conflict when copying. Only applies to copying into an existing environment
    #[serde(rename = "conflict_strategy", skip_serializing_if = "Option::is_none")]
    pub conflict_strategy: Option<ConflictStrategy>,
    /// Filters to include and exclude copied objects
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<Box<models::EnvironmentCopyScope>>,
}

impl EnvironmentCopy {
    pub fn new(target_env: models::EnvironmentCopyTarget) -> EnvironmentCopy {
        EnvironmentCopy {
            target_env: Box::new(target_env),
            conflict_strategy: None,
            scope: None,
        }
    }
}
/// Action to take when detecting a conflict when copying. Only applies to copying into an existing environment
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConflictStrategy {
    #[serde(rename = "fail")]
    Fail,
    #[serde(rename = "overwrite")]
    Overwrite,
}

impl Default for ConflictStrategy {
    fn default() -> ConflictStrategy {
        Self::Fail
    }
}

