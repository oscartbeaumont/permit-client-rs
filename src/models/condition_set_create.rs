/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConditionSetCreate {
    /// A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.
    #[serde(rename = "key")]
    pub key: String,
    /// the type of the set: UserSet or ResourceSet
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::ConditionSetType>,
    /// whether the set was autogenerated by the system.
    #[serde(rename = "autogenerated", skip_serializing_if = "Option::is_none")]
    pub autogenerated: Option<bool>,
    #[serde(rename = "resource_id", skip_serializing_if = "Option::is_none")]
    pub resource_id: Option<Box<models::ResourceId>>,
    /// A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'
    #[serde(rename = "name")]
    pub name: String,
    /// an optional longer description of the set
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// a boolean expression that consists of multiple conditions, with and/or logic.
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<serde_json::Value>,
    #[serde(rename = "parent_id", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<Box<models::ParentId>>,
}

impl ConditionSetCreate {
    pub fn new(key: String, name: String) -> ConditionSetCreate {
        ConditionSetCreate {
            key,
            r#type: None,
            autogenerated: None,
            resource_id: None,
            name,
            description: None,
            conditions: None,
            parent_id: None,
        }
    }
}

