/*
 * Permit.io API
 *
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceInstanceRead {
    /// A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
    #[serde(rename = "key")]
    pub key: String,
    /// the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
    #[serde(rename = "tenant")]
    pub tenant: String,
    /// the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
    #[serde(rename = "resource")]
    pub resource: String,
    /// Unique id of the resource instance
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Unique id of the organization that the resource instance belongs to.
    #[serde(rename = "organization_id")]
    pub organization_id: uuid::Uuid,
    /// Unique id of the project that the resource instance belongs to.
    #[serde(rename = "project_id")]
    pub project_id: uuid::Uuid,
    /// Unique id of the environment that the resource instance belongs to.
    #[serde(rename = "environment_id")]
    pub environment_id: uuid::Uuid,
    /// Date and time when the resource instance was created (ISO_8601 format).
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Date and time when the resource instance was last updated/modified (ISO_8601 format).
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// the id of the resource (type) of this resource instance.
    #[serde(rename = "resource_id")]
    pub resource_id: uuid::Uuid,
    /// the id of the tenant of this resource instance.
    #[serde(rename = "tenant_id")]
    pub tenant_id: uuid::Uuid,
    /// Arbitrary resource attributes that will be used to enforce attribute-based access control policies.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    /// The relationships of the resource instance.
    #[serde(rename = "relationships", skip_serializing_if = "Option::is_none")]
    pub relationships: Option<Vec<models::RelationshipTupleBlockRead>>,
}

impl ResourceInstanceRead {
    pub fn new(key: String, tenant: String, resource: String, id: uuid::Uuid, organization_id: uuid::Uuid, project_id: uuid::Uuid, environment_id: uuid::Uuid, created_at: String, updated_at: String, resource_id: uuid::Uuid, tenant_id: uuid::Uuid) -> ResourceInstanceRead {
        ResourceInstanceRead {
            key,
            tenant,
            resource,
            id,
            organization_id,
            project_id,
            environment_id,
            created_at,
            updated_at,
            resource_id,
            tenant_id,
            attributes: None,
            relationships: None,
        }
    }
}

